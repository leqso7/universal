import React, { useState, useEffect, useCallback, useMemo } from 'react';
import styled from 'styled-components';
import HomeButton from './HomeButton';
import { useNavigate } from 'react-router-dom';
import { usePlayer } from '../context/PlayerContext.jsx';

const mazes = [
  // ·Éû·Éò·É†·Éï·Éî·Éö·Éò ·Éö·Éê·Éë·Éò·É†·Éò·Éú·Éó·Éò
  [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  ],
  // ·Éõ·Éî·Éù·É†·Éî ·Éö·Éê·Éë·Éò·É†·Éò·Éú·Éó·Éò
  [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  ],
  // ·Éõ·Éî·É°·Éê·Éõ·Éî ·Éö·Éê·Éë·Éò·É†·Éò·Éú·Éó·Éò
  [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  ],
  // ·Éõ·Éî·Éù·Éó·ÉÆ·Éî ·Éö·Éê·Éë·Éò·É†·Éò·Éú·Éó·Éò
  [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  ],
  // ·Éõ·Éî·ÉÆ·É£·Éó·Éî ·Éö·Éê·Éë·Éò·É†·Éò·Éú·Éó·Éò
  [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  ],
  // ·Éõ·Éî·Éî·É•·Éï·É°·Éî ·Éö·Éê·Éë·Éò·É†·Éò·Éú·Éó·Éò
  [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1],
    [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  ],
  // ·Éõ·Éî·É®·Éï·Éò·Éì·Éî ·Éö·Éê·Éë·Éò·É†·Éò·Éú·Éó·Éò
  [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  ],
  // ·Éõ·Éî·É†·Éï·Éî ·Éö·Éê·Éë·Éò·É†·Éò·Éú·Éó·Éò
  [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
    [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  ],
  // ·Éõ·Éî·É™·ÉÆ·É†·Éî ·Éö·Éê·Éë·Éò·É†·Éò·Éú·Éó·Éò
  [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1],
    [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1],
    [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  ],
  // ·Éõ·Éî·Éê·Éó·Éî ·Éö·Éê·Éë·Éò·É†·Éò·Éú·Éó·Éò
  [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  ],
  // ·Éõ·Éî·Éó·Éî·É†·Éó·Éõ·Éî·É¢·Éî ·Éö·Éê·Éë·Éò·É†·Éò·Éú·Éó·Éò
  [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  ],
  // ·Éõ·Éî·Éó·Éù·É†·Éõ·Éî·É¢·Éî ·Éö·Éê·Éë·Éò·É†·Éò·Éú·Éó·Éò
  [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  ],
  // ·Éõ·Éî·É™·Éê·Éõ·Éî·É¢·Éî ·Éö·Éê·Éë·Éò·É†·Éò·Éú·Éó·Éò
  [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1],
    [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  ],
  // ·Éõ·Éî·Éó·Éù·Éó·ÉÆ·Éõ·Éî·É¢·Éî ·Éö·Éê·Éë·Éò·É†·Éò·Éú·Éó·Éò
  [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  ],
  // ·Éõ·Éî·Éó·ÉÆ·É£·Éó·Éõ·Éî·É¢·Éî ·Éö·Éê·Éë·Éò·É†·Éò·Éú·Éó·Éò
  [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  ]
];

const mazeCharacters = [
  { 
    char1: 'üê±', char2: 'üê∂',
    target1: 'üêü', target2: 'ü¶¥',
    description: '·Éô·Éê·É¢·Éê ·Éî·É´·Éî·Éë·É° ·Éó·Éî·Éï·Éñ·É°, ·É´·Éê·É¶·Éö·Éò - ·É´·Éï·Éê·Éö·É°'
  },
  { 
    char1: 'üê≠', char2: 'üê∞',
    target1: 'üßÄ', target2: 'ü•ï',
    description: '·Éó·Éê·Éí·Éï·Éò ·Éî·É´·Éî·Éë·É° ·Éß·Éï·Éî·Éö·É°, ·Éô·É£·É†·Éì·É¶·Éî·Éö·Éò - ·É°·É¢·Éê·É§·Éò·Éö·Éù·É°'
  },
  { 
    char1: 'ü¶ä', char2: 'üêª',
    target1: 'üçó', target2: 'üçØ',
    description: '·Éõ·Éî·Éö·Éò·Éê ·Éî·É´·Éî·Éë·É° ·É•·Éê·Éó·Éê·Éõ·É°, ·Éì·Éê·Éó·Éï·Éò - ·Éó·Éê·É§·Éö·É°'
  },
  {
    char1: 'üêµ', char2: 'üêò',
    target1: 'üçå', target2: 'ü•ú',
    description: '·Éõ·Éê·Éò·Éõ·É£·Éú·Éò ·Éî·É´·Éî·Éë·É° ·Éë·Éê·Éú·Éê·Éú·É°, ·É°·Éû·Éò·Éö·Éù - ·Éê·É†·Éê·É•·Éò·É°·É°'
  },
  {
    char1: 'ü¶Å', char2: 'ü¶í',
    target1: 'ü•©', target2: 'üåø',
    description: '·Éö·Éù·Éõ·Éò ·Éî·É´·Éî·Éë·É° ·ÉÆ·Éù·É†·É™·É°, ·Éü·Éò·É†·Éê·É§·Éò - ·É§·Éù·Éó·Éö·Éî·Éë·É°'
  },
  {
    char1: 'üêº', char2: 'ü¶ò',
    target1: 'üéã', target2: 'üåæ',
    description: '·Éû·Éê·Éú·Éì·Éê ·Éî·É´·Éî·Éë·É° ·Éë·Éê·Éõ·Éë·É£·Éô·É°, ·Éô·Éî·Éú·Éí·É£·É†·É£ - ·Éë·Éê·Éö·Éê·ÉÆ·É°'
  },
  {
    char1: 'ü¶Ö', char2: 'ü¶ù',
    target1: 'üê†', target2: 'ü•ö',
    description: '·Éê·É†·É¨·Éò·Éï·Éò ·Éî·É´·Éî·Éë·É° ·Éó·Éî·Éï·Éñ·É°, ·Éî·Éú·Éù·É¢·Éò - ·Éô·Éï·Éî·É†·É™·ÉÆ·É°'
  },
  {
    char1: 'ü¶ç', char2: 'ü¶¶',
    target1: 'üçé', target2: 'üêö',
    description: '·Éí·Éù·É†·Éò·Éö·Éê ·Éî·É´·Éî·Éë·É° ·Éï·Éê·É®·Éö·É°, ·É¨·Éê·Éï·Éò - ·Éú·Éò·Éü·Éê·É†·Éê·É°'
  },
  {
    char1: 'ü¶©', char2: 'ü¶®',
    target1: 'ü¶ê', target2: 'üçá',
    description: '·É§·Éö·Éê·Éõ·Éò·Éú·Éí·Éù ·Éî·É´·Éî·Éë·É° ·Éô·É†·Éî·Éï·Éî·É¢·É°, ·É°·Éô·É£·Éú·É°·Éò - ·Éß·É£·É†·É´·Éî·Éú·É°'
  },
  {
    char1: 'ü¶°', char2: 'ü¶É',
    target1: 'üçÑ', target2: 'üå∞',
    description: '·Éõ·Éê·É©·Éï·Éò ·Éî·É´·Éî·Éë·É° ·É°·Éù·Éô·Éù·É°, ·Éò·Éú·Éì·Éê·É£·É†·Éò - ·É†·Éô·Éù·É°'
  },
  {
    char1: 'ü¶´', char2: 'ü¶•',
    target1: 'üå≥', target2: 'üçÉ',
    description: '·Éó·Éê·ÉÆ·Éï·Éò ·Éî·É´·Éî·Éë·É° ·ÉÆ·Éî·É°, ·Éñ·Éê·É†·Éõ·Éê·É™·Éê - ·É§·Éù·Éó·Éö·Éî·Éë·É°'
  },
  {
    char1: 'ü¶ô', char2: 'ü¶õ',
    target1: 'üåø', target2: 'üå±',
    description: '·Éö·Éê·Éõ·Éê ·Éî·É´·Éî·Éë·É° ·Éë·Éê·Éö·Éê·ÉÆ·É°, ·Éë·Éî·É∞·Éî·Éõ·Éù·Éó·Éò - ·Éö·Éî·É†·É¨·Éê·Éõ·É°'
  },
  {
    char1: 'ü¶å', char2: 'ü¶ä',
    target1: 'üçÅ', target2: 'üêá',
    description: '·Éò·É†·Éî·Éõ·Éò ·Éî·É´·Éî·Éë·É° ·É§·Éù·Éó·Éù·Éö·É°, ·Éõ·Éî·Éö·Éò·Éê - ·Éô·É£·É†·Éì·É¶·Éî·Éö·É°'
  },
  {
    char1: 'ü¶ú', char2: 'ü¶°',
    target1: 'ü••', target2: 'üçØ',
    description: '·Éó·É£·Éó·Éò·Éß·É£·É®·Éò ·Éî·É´·Éî·Éë·É° ·É•·Éù·É•·Éù·É°·É°, ·Éõ·Éê·É©·Éï·Éò - ·Éó·Éê·É§·Éö·É°'
  },
  {
    char1: 'ü¶¢', char2: 'ü¶¶',
    target1: 'üê∏', target2: 'üêü',
    description: '·Éí·Éî·Éì·Éò ·Éî·É´·Éî·Éë·É° ·Éë·Éê·Éß·Éê·Éß·É°, ·É¨·Éê·Éï·Éò - ·Éó·Éî·Éï·Éñ·É°'
  },
  {
    char1: 'ü¶ö', char2: 'ü¶®',
    target1: 'ü™±', target2: 'üçì',
    description: '·É§·Éê·É†·É®·Éî·Éï·Éê·Éú·Éí·Éò ·Éî·É´·Éî·Éë·É° ·É≠·Éò·Éê·É°, ·É°·Éô·É£·Éú·É°·Éò - ·Éõ·Éê·É†·É¨·Éß·Éï·É°'
  },
  {
    char1: 'ü¶É', char2: 'ü¶ù',
    target1: 'üåΩ', target2: 'üçé',
    description: '·Éò·Éú·Éì·Éê·É£·É†·Éò ·Éî·É´·Éî·Éë·É° ·É°·Éò·Éõ·Éò·Éú·Éì·É°, ·Éî·Éú·Éù·É¢·Éò - ·Éï·Éê·É®·Éö·É°'
  },
  {
    char1: 'ü¶ò', char2: 'üê®',
    target1: 'üåæ', target2: 'üåø',
    description: '·Éô·Éî·Éú·Éí·É£·É†·É£ ·Éî·É´·Éî·Éë·É° ·Éë·Éê·Éö·Éê·ÉÆ·É°, ·Éô·Éù·Éê·Éö·Éê - ·Éî·Éï·Éô·Éê·Éö·Éò·Éû·É¢·É°'
  },
  {
    char1: 'ü¶¨', char2: 'ü¶Ö',
    target1: 'üå±', target2: 'üêç',
    description: '·Éë·Éò·Éñ·Éù·Éú·Éò ·Éî·É´·Éî·Éë·É° ·Éë·Éê·Éö·Éê·ÉÆ·É°, ·Éê·É†·É¨·Éò·Éï·Éò - ·Éí·Éï·Éî·Éö·É°'
  }
];

const GameContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  min-height: 100vh;
  padding: 20px;
  background: linear-gradient(-45deg, #64ccf0cc, #80d0c7cc, #56bcbdcc, #52b69acc);
`;

const MazeContainer = styled.div`
  display: grid;
  grid-template-columns: repeat(15, 30px);
  gap: 1px;
  background: rgba(255, 255, 255, 0.1);
  padding: 10px;
  border-radius: 10px;
  margin: 20px 0;
`;

const Cell = styled.div`
  width: 30px;
  height: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 20px;
  background-color: ${props => props.isWall ? '#4a90e2' : 'white'};
  border-radius: 4px;
`;

const Title = styled.h1`
  color: white;
  text-align: center;
  margin: 20px 0;
  font-size: 2rem;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
`;

const CharacterSelector = styled.div`
  display: flex;
  gap: 10px;
  margin: 10px 0;
`;

const CharacterButton = styled.button`
  padding: 10px 20px;
  font-size: 1.2rem;
  background: ${props => props.isSelected ? 'rgba(255, 255, 255, 0.9)' : 'rgba(255, 255, 255, 0.5)'};
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.2s ease;

  &:hover {
    background: rgba(255, 255, 255, 0.7);
  }
`;

const WinMessage = styled.div`
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: rgba(255, 255, 255, 0.9);
  padding: 20px 40px;
  border-radius: 10px;
  font-size: 1.5rem;
  color: #333;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  z-index: 1000;
  text-align: center;
`;
const TestButton = styled.button`
  padding: 10px 20px;
  font-size: 1.2rem;
  background: rgba(100, 100, 255, 0.7);
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.2s ease;
  margin-top: 20px;

  &:hover {
    background: rgba(100, 100, 255, 0.9);
  }
`;

const Description = styled.div`
  background: rgba(255, 255, 255, 0.9);
  padding: 15px;
  border-radius: 10px;
  margin: 10px 0;
  font-size: 1.2rem;
  text-align: center;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  
  .emoji-hint {
    font-size: 1.5rem;
    margin: 0 5px;
  }

  .active-character {
    background: rgba(100, 200, 255, 0.3);
    padding: 5px 10px;
    border-radius: 5px;
    margin: 5px;
    display: inline-block;
  }
`;

const findFreePosition = (maze, excludePositions = [], minDistance = 3, isTarget = false) => {
  const freeCells = [];
  
  const calculateDistance = (pos1, pos2) => {
    return Math.abs(pos1.x - pos2.x) + Math.abs(pos1.y - pos2.y);
  };
  
  const hasWallBetween = (pos1, pos2) => {
    const dx = pos2.x - pos1.x;
    const dy = pos2.y - pos1.y;
    const steps = Math.max(Math.abs(dx), Math.abs(dy));
    
    for (let i = 1; i <= steps; i++) {
      const x = pos1.x + Math.round((dx * i) / steps);
      const y = pos1.y + Math.round((dy * i) / steps);
      if (maze[y][x] === 1) return true;
    }
    return false;
  };
  
  for (let y = 0; y < maze.length; y++) {
    for (let x = 0; x < maze[y].length; x++) {
      if (maze[y][x] === 0) {
        const pos = { x, y };
        const isExcluded = excludePositions.some(
          excl => excl && excl.x === x && excl.y === y
        );
        
        const hasMinDistance = excludePositions.every(excl => 
          !excl || calculateDistance(pos, excl) >= minDistance
        );

        const hasObstacles = !isTarget || excludePositions.every(excl =>
          !excl || hasWallBetween(pos, excl)
        );
        
        if (!isExcluded && hasMinDistance && hasObstacles) {
          freeCells.push(pos);
        }
      }
    }
  }
  
  if (freeCells.length === 0) {
    if (minDistance > 1) {
      return findFreePosition(maze, excludePositions, minDistance - 1, isTarget);
    }
    return null;
  }
  
  const center = { x: 7, y: 5 };
  freeCells.sort((a, b) => {
    const distA = calculateDistance(a, center);
    const distB = calculateDistance(b, center);
    return distB - distA;
  });
  
  return freeCells[Math.floor(Math.random() * Math.min(freeCells.length, 3))];
};

const isValidMove = (pos, maze) => {
  if (!pos || !maze) return false;
  return pos.x >= 0 && pos.x < maze[0].length && 
         pos.y >= 0 && pos.y < maze.length && 
         maze[pos.y][pos.x] === 0;
};

const LabyrinthGame = () => {
  const navigate = useNavigate();
  const [currentMaze, setCurrentMaze] = useState(0);
  const [char1Pos, setChar1Pos] = useState(null);
  const [char2Pos, setChar2Pos] = useState(null);
  const [target1Pos, setTarget1Pos] = useState(null);
  const [target2Pos, setTarget2Pos] = useState(null);
  const [selectedCharacter, setSelectedCharacter] = useState('char1');
  const [char1ReachedTarget, setChar1ReachedTarget] = useState(false);
  const [char2ReachedTarget, setChar2ReachedTarget] = useState(false);
  const [gameWon, setGameWon] = useState(false);
  
  const { updateGameProgress, getGameStats } = usePlayer();
  const stats = useMemo(() => getGameStats('labyrinth'), [getGameStats]);
  const completedMazes = useMemo(() => stats?.completedTasks || new Set(), [stats]);

  const currentCharacters = mazeCharacters[currentMaze];

  const initPositions = useCallback(() => {
    const currentMazeData = mazes[currentMaze];
    if (!currentMazeData) return;
    
    // ·Éû·Éò·É†·Éï·Éî·Éö·Éò ·É™·ÉÆ·Éù·Éï·Éî·Éö·Éò·É° ·Éû·Éù·Éñ·Éò·É™·Éò·Éê
    const char1 = findFreePosition(currentMazeData, [], 3);
    if (!char1) return;
    
    // ·Éû·Éò·É†·Éï·Éî·Éö·Éò ·É°·Éê·Éõ·Éò·Éñ·Éú·Éò·É° ·Éû·Éù·Éñ·Éò·É™·Éò·Éê
    const target1 = findFreePosition(currentMazeData, [char1], 3, true);
    if (!target1) return;
    
    // ·Éõ·Éî·Éù·É†·Éî ·É™·ÉÆ·Éù·Éï·Éî·Éö·Éò·É° ·Éû·Éù·Éñ·Éò·É™·Éò·Éê
    const char2 = findFreePosition(currentMazeData, [char1, target1], 3);
    if (!char2) return;
    
    // ·Éõ·Éî·Éù·É†·Éî ·É°·Éê·Éõ·Éò·Éñ·Éú·Éò·É° ·Éû·Éù·Éñ·Éò·É™·Éò·Éê
    const target2 = findFreePosition(currentMazeData, [char1, target1, char2], 3, true);
    if (!target2) return;

    // ·Éû·Éù·Éñ·Éò·É™·Éò·Éî·Éë·Éò·É° ·Éí·Éê·Éú·Éê·ÉÆ·Éö·Éî·Éë·Éê
    setChar1Pos(char1);
    setTarget1Pos(target1);
    setChar2Pos(char2);
    setTarget2Pos(target2);
    
    // ·É°·Éê·É¨·Éß·Éò·É°·Éò ·Éõ·Éì·Éí·Éù·Éõ·Éê·É†·Éî·Éù·Éë·Éò·É° ·Éí·Éê·Éì·Éê·Éß·Éî·Éú·Éî·Éë·Éê
    setChar1ReachedTarget(false);
    setChar2ReachedTarget(false);
    setGameWon(false);
    setSelectedCharacter('char1');
  }, [currentMaze]);

  const findFirstUncompletedMaze = useCallback(() => {
    let index = 0;
    while (completedMazes.has(index) && index < mazes.length) {
      index++;
    }
    return index >= mazes.length ? 0 : index;
  }, [completedMazes]);

  useEffect(() => {
    if (currentMaze !== undefined && currentMaze !== null) {
      initPositions();
    }
  }, [currentMaze, initPositions]);

  useEffect(() => {
    const newIndex = findFirstUncompletedMaze();
    setCurrentMaze(newIndex);
  }, [findFirstUncompletedMaze]);

  useEffect(() => {
    if (char1ReachedTarget && !char2ReachedTarget) {
      setSelectedCharacter('char2');
    }
  }, [char1ReachedTarget]);

  useEffect(() => {
    if (char1ReachedTarget && char2ReachedTarget) {
      setGameWon(true);
      const timestamp = Date.now();
      updateGameProgress('labyrinth', timestamp, { 
        mazeIndex: currentMaze,
        completed: true
      });
      
      setTimeout(() => {
        setCurrentMaze(prev => (prev + 1) % mazes.length);
        setChar1Pos(null);
        setChar2Pos(null);
        setTarget1Pos(null);
        setTarget2Pos(null);
        setChar1ReachedTarget(false);
        setChar2ReachedTarget(false);
        setGameWon(false);
        setSelectedCharacter('char1');
      }, 1500);
    }
  }, [char1ReachedTarget, char2ReachedTarget, currentMaze, updateGameProgress]);

  const moveCharacter = (direction) => {
    const currentPos = selectedCharacter === 'char1' ? char1Pos : char2Pos;
    const targetPos = selectedCharacter === 'char1' ? target1Pos : target2Pos;
    const otherCharPos = selectedCharacter === 'char1' ? char2Pos : char1Pos;
    
    if (!currentPos) return;

    let newX = currentPos.x;
    let newY = currentPos.y;

    switch (direction) {
      case 'up': newY--; break;
      case 'down': newY++; break;
      case 'left': newX--; break;
      case 'right': newX++; break;
      default: return;
    }

    const newPos = { x: newX, y: newY };
    
    // ·É®·Éî·Éï·Éê·Éõ·Éù·É¨·Éõ·Éù·Éó ·Éê·É†·Éò·É° ·Éó·É£ ·Éê·É†·Éê ·Éê·ÉÆ·Éê·Éö·Éò ·Éû·Éù·Éñ·Éò·É™·Éò·Éê ·Éï·Éê·Éö·Éò·Éì·É£·É†·Éò ·Éì·Éê ·Éê·É† ·Éî·Éõ·Éó·ÉÆ·Éï·Éî·Éï·Éê ·Éó·É£ ·Éê·É†·Éê ·Éõ·Éî·Éù·É†·Éî ·Éû·Éî·É†·É°·Éù·Éú·Éê·Éü·Éò·É° ·Éû·Éù·Éñ·Éò·É™·Éò·Éê·É°
    if (isValidMove(newPos, mazes[currentMaze]) && 
        !(otherCharPos && newPos.x === otherCharPos.x && newPos.y === otherCharPos.y)) {
      
      if (selectedCharacter === 'char1') {
        setChar1Pos(newPos);
        // ·É®·Éî·Éï·Éê·Éõ·Éù·É¨·Éõ·Éù·Éó ·Éõ·Éò·Éê·É¶·É¨·Éò·Éê ·Éó·É£ ·Éê·É†·Éê ·Éû·Éò·É†·Éï·Éî·Éö·Éõ·Éê ·Éû·Éî·É†·É°·Éù·Éú·Éê·Éü·Éõ·Éê ·Éõ·Éò·Éñ·Éê·Éú·É°
        if (newPos.x === target1Pos.x && newPos.y === target1Pos.y) {
          setChar1ReachedTarget(true);
          if (!char2ReachedTarget) {
            setSelectedCharacter('char2');
          }
        }
      } else {
        setChar2Pos(newPos);
        // ·É®·Éî·Éï·Éê·Éõ·Éù·É¨·Éõ·Éù·Éó ·Éõ·Éò·Éê·É¶·É¨·Éò·Éê ·Éó·É£ ·Éê·É†·Éê ·Éõ·Éî·Éù·É†·Éî ·Éû·Éî·É†·É°·Éù·Éú·Éê·Éü·Éõ·Éê ·Éõ·Éò·Éñ·Éê·Éú·É°
        if (newPos.x === target2Pos.x && newPos.y === target2Pos.y) {
          setChar2ReachedTarget(true);
          if (!char1ReachedTarget) {
            setSelectedCharacter('char1');
          }
        }
      }

      // ·É®·Éî·Éï·Éê·Éõ·Éù·É¨·Éõ·Éù·Éó ·Éí·Éê·Éò·Éõ·Éê·É†·ÉØ·Éï·Éê ·Éó·É£ ·Éê·É†·Éê ·Éõ·Éù·Éó·Éê·Éõ·Éê·É®·Éî·Éõ
      if ((selectedCharacter === 'char1' && char2ReachedTarget && newPos.x === target1Pos.x && newPos.y === target1Pos.y) ||
          (selectedCharacter === 'char2' && char1ReachedTarget && newPos.x === target2Pos.x && newPos.y === target2Pos.y)) {
        setGameWon(true);
        const timestamp = Date.now();
        updateGameProgress('labyrinth', timestamp, { taskIndex: currentMaze });
        setTimeout(() => {
          setCurrentMaze(prev => prev + 1);
          initPositions();
        }, 1500);
      }
    }
  };

  useEffect(() => {
    const handleKeyDown = (event) => {
      if (event.key === 'ArrowUp' || event.key === 'w' || 
          event.key === 'ArrowDown' || event.key === 's' || 
          event.key === 'ArrowLeft' || event.key === 'a' || 
          event.key === 'ArrowRight' || event.key === 'd') {
        event.preventDefault();
      }
      
      switch (event.key) {
        case 'ArrowUp':
        case 'w':
          moveCharacter('up');
          break;
        case 'ArrowDown':
        case 's':
          moveCharacter('down');
          break;
        case 'ArrowLeft':
        case 'a':
          moveCharacter('left');
          break;
        case 'ArrowRight':
        case 'd':
          moveCharacter('right');
          break;
        default:
          break;
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [moveCharacter]);

  return (
    <GameContainer>
      <HomeButton />
      <Title>·Éö·Éê·Éë·Éò·É†·Éò·Éú·Éó·Éò</Title>
      <Description>
        {currentCharacters.description}
        <div>
          <span className={`emoji-hint ${selectedCharacter === 'char1' ? 'active-character' : ''}`}>
            {currentCharacters.char1}
            <span>‚û°Ô∏è</span>
            {currentCharacters.target1}
          </span>
          &nbsp;&nbsp;&nbsp;
          <span className={`emoji-hint ${selectedCharacter === 'char2' ? 'active-character' : ''}`}>
            {currentCharacters.char2}
            <span>‚û°Ô∏è</span>
            {currentCharacters.target2}
          </span>
        </div>
      </Description>
      {gameWon && (
        <WinMessage>
          ·Éí·Éò·Éö·Éù·É™·Éê·Éï·Éó! ·Éó·É•·Éï·Éî·Éú ·Éí·Éê·Éò·Éê·É†·Éî·Éó ·Éß·Éï·Éî·Éö·Éê ·Éì·Éù·Éú·Éî! üéâ
        </WinMessage>
      )}
      <MazeContainer>
        {mazes[currentMaze]?.map((row, y) => (
          row.map((cell, x) => (
            <Cell
              key={`${x}-${y}`}
              isWall={cell === 1}
            >
              {(() => {
                // ·Éó·É£ ·Éû·Éò·É†·Éï·Éî·Éö·Éò ·Éû·Éî·É†·É°·Éù·Éú·Éê·Éü·Éò ·Éì·Éí·Éê·É° ·Éê·Éõ ·É£·ÉØ·É†·Éê·Éñ·Éî
                if (char1Pos && char1Pos.x === x && char1Pos.y === y) {
                  return currentCharacters?.char1;
                }
                // ·Éó·É£ ·Éõ·Éî·Éù·É†·Éî ·Éû·Éî·É†·É°·Éù·Éú·Éê·Éü·Éò ·Éì·Éí·Éê·É° ·Éê·Éõ ·É£·ÉØ·É†·Éê·Éñ·Éî
                if (char2Pos && char2Pos.x === x && char2Pos.y === y) {
                  return currentCharacters?.char2;
                }
                // ·Éó·É£ ·Éû·Éò·É†·Éï·Éî·Éö·Éò ·É°·Éê·Éõ·Éò·Éñ·Éú·Éî·Éê ·Éì·Éê ·Éû·Éî·É†·É°·Éù·Éú·Éê·Éü·Éò ·Éê·É† ·Éì·Éí·Éê·É° ·Éõ·Éê·É°·Éñ·Éî
                if (target1Pos && target1Pos.x === x && target1Pos.y === y &&
                    !(char1Pos && char1Pos.x === x && char1Pos.y === y)) {
                  return currentCharacters?.target1;
                }
                // ·Éó·É£ ·Éõ·Éî·Éù·É†·Éî ·É°·Éê·Éõ·Éò·Éñ·Éú·Éî·Éê ·Éì·Éê ·Éû·Éî·É†·É°·Éù·Éú·Éê·Éü·Éò ·Éê·É† ·Éì·Éí·Éê·É° ·Éõ·Éê·É°·Éñ·Éî
                if (target2Pos && target2Pos.x === x && target2Pos.y === y &&
                    !(char2Pos && char2Pos.x === x && char2Pos.y === y)) {
                  return currentCharacters?.target2;
                }
                return null;
              })()}
            </Cell>
          ))
        ))}
      </MazeContainer>
    </GameContainer>
  );
};

export default LabyrinthGame;